import pygame

"""A class for scrolling a background image seamlessly in both directions.
    image_path is the path to the image file to use as the background.
    speed is the scrolling speed in pixels per second in the x and y directions.
    position is the initial position of the background.
    repeat_x and repeat_y are flags that determine if the background should loop in the x and y directions."""



class Background:# speed for scrolling                              repeat x and y are for looping the background
    def __init__(self, image_path, speed=(0, 0), position=(0, 0), repeat_x=True, repeat_y=False):
        self.image = pygame.image.load(image_path).convert_alpha()
        self.speed = pygame.Vector2(speed)
        self.position = pygame.Vector2(position)
        self.repeat_x = repeat_x
        self.repeat_y = repeat_y
        self.rect = self.image.get_rect()

"""Update the background position based on the speed and the time passed since the last update.
        dt is the time passed since the last update in seconds."""


    def update(self, dt):
        self.position += self.speed * dt

        # Handle seamless looping: if the background is repeating, loop it back to the start
        if self.repeat_x:
        if self.repeat_x:  # Loop horizontally if repeat_x is enabled
            if self.rect.width > 0:
                self.position.x %= self.rect.width

        if self.repeat_y:  # Loop vertically if repeat_y is enabled
            if self.rect.height > 0:
                self.position.y %= self.rect.height
            self.position.y %= self.rect.height

"""Draw the background on the given surface."""
    def draw(self, surface):
        surface_rect = surface.get_rect()
        # Loop horizontally if repeat_x is enabled
        start_x = -self.rect.width if self.repeat_x else 0
        end_x = surface_rect.width + (self.rect.width if self.repeat_x else 0)
        
        # Loop vertically if repeat_y is enabled
        start_y = -self.rect.height if self.repeat_y else 0
        end_y = surface_rect.height + (self.rect.height if self.repeat_y else 0)

        x = self.position.x
        y = self.position.y
        while y < end_y:
            while x < end_x:
                surface.blit(self.image, (x, y))
                x += self.rect.width
            x = start_x
            y += self.rect.height


__name__ == "__main__":  # Test the background scrolling
    pygame.init()
    screen = pygame.display.set_mode((800, 600))
    clock = pygame.time.Clock()

    background = Background("background.png", speed=(0.1, 0.1), repeat_x=True, repeat_y=True)

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        dt = clock.tick(60) / 1000  # Convert milliseconds to seconds

        background.update(dt)

        screen.fill((0, 0, 0))
        background.draw(screen)
        pygame.display.flip()

    pygame.quit()
